name: "3. CI/CD pipeline"

on:
  workflow_run:
    workflows: ["2. Test Checks"]
    types: [completed]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  PROJECT_NAME: "devops1"  
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR metadata
        id: pr-meta
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const runId = context.payload.workflow_run.id;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
      
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: runId
            });
      
            const commitSha = run.head_sha;
      
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: commitSha
            });
      
            if (prs.length === 0) {
              core.setOutput('skip', 'true');
              return null;
            }
      
            const pr = prs[0];
      
            core.setOutput('skip', 'false');
      
            return {
              labels: pr.labels.map(label => label.name),
              branch: pr.head.ref,
              title: pr.title,
              number: pr.number,
              html_url: pr.html_url
            };
            
      - name: Determine update type
        id: update-type
        run: |
          if [[ "${{ steps.pr-meta.outputs.labels }}" == *"feature"* ]]; then
            echo "TYPE=minor" >> $GITHUB_OUTPUT
            echo "LOG_TYPE=Feature" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.pr-meta.outputs.labels }}" == *"hotfix"* ]]; then
            echo "TYPE=patch" >> $GITHUB_OUTPUT
            echo "LOG_TYPE=Hotfix" >> $GITHUB_OUTPUT
          else
            echo "No version update needed"
            exit 0
          fi

      - name: Get current version
        id: current-ver
        run: |
          if [ -f "version" ]; then
            echo "VERSION=$(cat version)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new-ver
        run: |
          IFS='.' read -ra PARTS <<< "${{ steps.current-ver.outputs.VERSION }}"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}
          if [ "${{ steps.update-type.outputs.TYPE }}" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "OLD_VERSION=${{ steps.current-ver.outputs.VERSION }}" >> $GITHUB_OUTPUT

      - name: Update version file
        run: echo "${{ steps.new-ver.outputs.VERSION }}" > version

      - name: Update changelog
        run: |
          if [ ! -f "changelog.md" ]; then
            echo "# Changelog" > changelog.md
            echo "" >> changelog.md
          fi
          TIMESTAMP=$(date +"%Y-%m-%d")
          ENTRY="## ${{ steps.new-ver.outputs.VERSION }} ($TIMESTAMP)\n"
          ENTRY+="- **${{ steps.update-type.outputs.LOG_TYPE }}**: ${{ steps.pr-meta.outputs.title }} "
          ENTRY+="(PR #${{ steps.pr-meta.outputs.number }}, branch: ${{ steps.pr-meta.outputs.branch }})\n"
          echo -e "$ENTRY\n$(cat changelog.md)" > changelog.md

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKERHUB_USERNAME/$PROJECT_NAME:${{ steps.new-ver.outputs.VERSION }} .
          docker tag $DOCKERHUB_USERNAME/$PROJECT_NAME:${{ steps.new-ver.outputs.VERSION }} $DOCKERHUB_USERNAME/$PROJECT_NAME:latest
          docker push $DOCKERHUB_USERNAME/$PROJECT_NAME:${{ steps.new-ver.outputs.VERSION }}
          docker push $DOCKERHUB_USERNAME/$PROJECT_NAME:latest

      - name: Send Telegram notification
        run: |
          CHANGELOG_ENTRY=$(grep -A 5 "## ${{ steps.new-ver.outputs.VERSION }}" changelog.md)
          MESSAGE="*New release ${{ steps.new-ver.outputs.VERSION }}* ðŸš€
          Type: ${{ steps.update-type.outputs.LOG_TYPE }}
          PR: [#${{ steps.pr-meta.outputs.number }}](${{ steps.pr-meta.outputs.html_url }})
          Branch: \`${{ steps.pr-meta.outputs.branch }}\`
          
          *Changelog:*
          \`\`\`
          $CHANGELOG_ENTRY
          \`\`\`
          Docker image: \`$DOCKERHUB_USERNAME/$PROJECT_NAME:${{ steps.new-ver.outputs.VERSION }}\`"
          curl -s -X POST \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="Markdown"

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add version changelog.md
          git commit -m "[${{ steps.new-ver.outputs.VERSION }}] Version bump"
          git push origin HEAD:master

      - name: Add PR labels
        if: steps.pr-meta.outputs.skip != 'true'
        uses: actions/github-script@v6
        env:
          PR_NUMBER: ${{ steps.pr-meta.outputs.number }}
          VERSION: ${{ steps.new-ver.outputs.VERSION }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const version = process.env.VERSION;
      
            if (!prNumber) {
              throw new Error("PR number is missing â€” cannot label.");
            }
      
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(prNumber),
              labels: [
                `version:${version}`,
                'changelog',
                'dockerhub'
              ]
            });
